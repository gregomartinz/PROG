package es.upm.dit.prog.p5;

import java.util.ArrayList;
import java.util.Scanner;
import java.util.Locale;
import java.text.*;

import java.io.*;

/**
 * Esta clase permite definir un conjunto de antenas en una regi'on de un plano.
 * Facilita el c'alculo de la cobertura en un punto, al comprobar cuantas
 * antenas le tienen en su cobertura
 * @author aalonso
 *
 */
public class Region {

    private final int X_MAX = 100;
    private final int Y_MAX = 100;
    public final int N_MAX_ANTENAS = 5;

    private ArrayList <Radiante> laRegion;
    private int nAntenas = 0;

    private int nAntenasLeidas   = 0;
    private int nAntenasCreadas  = 0;
    private int nAntenasErroneas = 0;

/**
 * Constructor de la clase.
 */
    public Region() {
        laRegion = new ArrayList<Radiante>();
        nAntenas = 0;
    }

    private boolean estaDentro(Coordenada unPunto) {
        return    unPunto.getX() >= 0
               && unPunto.getX() < X_MAX
               && unPunto.getY() >= 0
               && unPunto.getY() < Y_MAX;
     }

    /**
     * A~nade una antena a la regi'on.
     * @param unaAntena La antena a a~nadir
     * @throws NullPointerException Se eleva esta excepc'on si
     * el par'ametro que se pasa vale null
     * @throws IllegalArgumentException Se eleva esta excepc'on si:
     * - El punto est'a fuera del plano
     * - Ya se ha a~nadido el n'umero m'aximo de antenas
     * - Ya hay una antena en la posici'on de la antena pasada coo par'ametro
     */

    public void anadirAntena(Radiante unaAntena)
           throws NullPointerException, IllegalArgumentException {

        if (unaAntena == null) {
            throw new NullPointerException();
        }

        if (!estaDentro(unaAntena.getPosicion())) {
            throw new IllegalArgumentException("Fuera del plano");
        }

        if (nAntenas == N_MAX_ANTENAS) {
            throw new IllegalArgumentException("Limite de antenas alcanzado");
        }

        try {
           if (hayAntena(unaAntena.getPosicion()) != null) {
               throw new
                  IllegalArgumentException("Ya hay una antena en la posici'on");
           }
        } catch (Exception e) {
            throw new IllegalArgumentException("Error al obtener la posici'on");
        }

        laRegion.add(unaAntena);
        nAntenas++;
    }

/**
 * Determina con cuantas antenas tiene cobertura el punto dado.
 * @param unPunto El punto para analizar su cobertura
 * @return El n'umero de antenas con cobertura
 * @throws NullPointerException Se eleva esta excepc'on si
 * el par'ametro que se pasa vale null
 * @throws IllegalArgumentException Se eleva esta excepc'on si
 * el punto est'a fuera del plano
 */

    public int nAntenasConCobertura(Coordenada unPunto)
    throws NullPointerException, IllegalArgumentException {
        int nEnCobertura = 0;

        if (unPunto == null) {
            throw new NullPointerException("Par�metro con valor null");
        }

        if (!estaDentro(unPunto)) {
                throw new IllegalArgumentException("Fuera del plano");
            }

        for (Radiante objeto : laRegion) {
            if (objeto.enCobertura(unPunto)) {
                nEnCobertura++;
            }
        }
        return nEnCobertura;
    }

    /**
     * Devuelve el n'umero de antenas definidas en la reg'on.
     * @return N'umero de antenas en la regi'on
     */
    public int nAntenasEnRegion() {
        return nAntenas;
    }

    /**
     * Comprueba si hay una antena creada en un punto dado.
     * @param unPunto el punto donde hay que determinar si hay antena
     * @return Devuelve la antena, o null si no hay antena
     * @throws NullPointerException Se eleva esta excepc'on si
     * el par'ametro que se pasa vale null
     * @throws IllegalArgumentException Se eleva esta excepc'on si el
     * punto est'a fuera del plano
     */

    public Radiante hayAntena(Coordenada unPunto)
           throws NullPointerException, IllegalArgumentException {

        if (unPunto == null) {
            throw new NullPointerException("Par�metro con valor null");
        }

        if (!estaDentro(unPunto)) {
            throw new IllegalArgumentException("Fuera del plano");
        }

        for (Radiante objeto : laRegion) {
            if    (unPunto.getX() == objeto.getPosicion().getX()
                && unPunto.getY() == objeto.getPosicion().getY()) {
                return objeto;
            }
        }
        return null;
    }

    /**
     * TODO: incluir comentarios javadoc
     *
     */
    public void escribirFichero(String nombreFichero) 
        throws NullPointerException, IOException {

        File fichero = new File (nombreFichero);
        FileWriter writer = new FileWriter(fichero);

        if (nombreFichero == null ) {
            throw new NullPointerException ("El nombre del fichero es nulo");
        }

        if(!fichero.exists()){
            throw new IOException("El fichero no existe");
        }

        if(fichero.exists()){
            String s = "";
            for (Radiante objeto : laRegion){
                s = objeto.toString();
                writer.write(s);
            }
        }
        writer.close();
    }
    }

    /**
     * TODO: incluir comentarios javadoc
     * 
     */
    public void leerFichero(String nombreFichero)
        throws NullPointerException, IOException {

        // TODO Incluir el c'odigo del m'etodo
    
    }

    /**
     * TODO: incluir comentarios javadoc
     * 
     */
    public void borrarAntena (Coordenada posicion)  
        throws NullPointerException, IllegalArgumentException{

        // TODO Incluir el c'odigo del m'etodo
        
    }

    /**
     * Este m'etodo retorna el n�mero de antenas le�das satisfactoriamente
     * de un fichero.
     * @return N'umero de antenas le'idas correctamente
     */
    public int nAntenasLeidas() {
        return nAntenasLeidas;
    }

    /**

     * Este m'etodo retorna el n'umero de antenas a~nadidas satisfactoriamente
     * le'idas de ficheros.
     * @return N'umero de antenas le'idas que se han creado correctamente
     */
    public int nAntenasCreadas() {
        return nAntenasCreadas;
    }

    /**
     * Este m'etodo retorna el n'umero de antenas a�adidas satisfactoriamente
     * que se han le'ido de un fichero.
     * @return N'umero de antenas er'oneas le'idas
     */
    public int nAntenasErroneas() {
        return nAntenasErroneas;
    }


    /**
     * Genera una tira de caracteres con los par�metros de las antenas de la
     * regi'on.
     * @return Tira de caracteres que representa la regi'on.
     */

    public String toString() {

        String antenasRegion = "";

        for (Radiante objeto : laRegion) {
            antenasRegion = antenasRegion + objeto.toString() + "\n";
        }
        return antenasRegion;
    }

}